/* 
 * Copyright (C) 2014 Bernardo Sulzbach
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.dungeon.gui;

import java.util.Queue;
import java.util.concurrent.ArrayBlockingQueue;
import org.apache.commons.lang3.text.WordUtils;
import org.dungeon.core.game.Game;
import org.dungeon.utils.Constants;

public class GameWindow extends javax.swing.JFrame {

    // The size of the output queue.
    private final int OUTPUT_LIMIT = 100;
    private final Queue<String> output_lines = new ArrayBlockingQueue<String>(OUTPUT_LIMIT);

    /**
     * Creates new form MainWindow
     */
    public GameWindow() {
        initComponents();
        setTitle(Constants.FULLNAME);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();
        textField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dungeon");
        setResizable(false);

        textPane.setEditable(false);
        textPane.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(textPane);

        textField.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        textField.setToolTipText("");
        textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE)
                    .addComponent(textField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldActionPerformed
        String text = textField.getText().trim();
        if (!text.isEmpty()) {
            if (!Game.renderTurn(text)) {
                System.exit(0);
            }
        }
        textField.setText(null);
    }//GEN-LAST:event_textFieldActionPerformed

    public void writeToTextPane(String str) {
        for (String line : str.split("\n")) {
            try {
                output_lines.add(WordUtils.wrap(line, Constants.WIDTH));
            } catch (IllegalStateException ex) {
                output_lines.poll();
            }
        }
        textPane.setText(getOutputText());
    }

    public void clearTextPane() {
        output_lines.clear();
        textPane.setText(getOutputText());
    }

    // Returns the last 20 strings (or less) of the output list concatenated.
    private String getOutputText() {
        StringBuilder stringBuilder = new StringBuilder();
        for (String string : output_lines) {
            stringBuilder.append(string).append('\n');
        }
        return stringBuilder.toString();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField textField;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables
}
